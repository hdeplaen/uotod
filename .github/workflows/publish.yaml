name: publish
on:
  push:
    branches:
    - main
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-12, macos-13, macos-14 ] # windows-latest not working
        python-version: [ "3.8", "3.9", "3.10", "3.11" , "3.12" ]
        include:
          - os: ubuntu-latest
            os-name: Linux
            pip-cache-path: ~/.cache/pip
          - os: macos-12
            os-name: MacOS 12
            pip-cache-path: ~/Library/Caches/pip
          - os: macos-13
            os-name: MacOS 13
            pip-cache-path: ~/Library/Caches/pip
          - os: macos-14
            os-name: MacOS 14
            pip-cache-path: ~/Library/Caches/pip
          - os: windows-latest
            os-name: Windows
            pip-cache-path: ~\AppData\Local\pip\Cache
    name: 🛠️ Build py${{ matrix.python-version }} @ ${{ matrix.os-name }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pypa/cbuildwheel
        run: python -m pip install cibuildwheel==2.16.5 --user --upgrade --progress-bar off
      - name: Building
        run: python -m cibuildwheel --output-dir wheelhouse
      - name: Store distribution
        uses: actions/upload-artifact@v3
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  test:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]
        include:
          - os: ubuntu-latest
            os-name: Linux
            pip-cache-path: ~/.cache/pip
          - os: macos-11
            os-name: MacOS
            pip-cache-path: ~/Library/Caches/pip
          - os: windows-latest
            os-name: Windows
            pip-cache-path: ~\AppData\Local\pip\Cache
    name: 🧪 Test py${{ matrix.python-version }} @ ${{ matrix.os-name }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --user --upgrade --progress-bar off -r requirements.txt
          python -m pip install --user --upgrade --progress-bar off -r tests/requirements.txt
      - name: Testing
        run: python -m pytest

  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true  # Optional, use if you have submodules

      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  publish-to-testpypi:
    needs: test
    name: 📦 Publish distribution to TestPyPI
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/uotod
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - name: Publishing
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish-to-pypi:
    needs: test
    name: 📦 Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/uotod
    permissions:
      id-token: write
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - name: Publishing
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: 📦 Sign and publish to GitHub Release
    needs: publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v1.2.3
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Upload to GitHub Release using the `gh` CLI.
        # `dist/` contains the built packages, and the
        # sigstore-produced signatures and certificates.
        run: >-
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'
